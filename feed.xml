<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>РУБИКОН</title>
    <description>InfoSite</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 27 Nov 2016 15:11:35 +0500</pubDate>
    <lastBuildDate>Sun, 27 Nov 2016 15:11:35 +0500</lastBuildDate>
    <generator>Jekyll v2.2.0</generator>
    
      <item>
        <title>Герса</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot;&gt;Назначение&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot;&gt;搭建过程&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#ruby&quot;&gt;安装Ruby&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#rubygems&quot;&gt;安装RubyGems&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#rubygemsjekyll&quot;&gt;用RubyGems安装Jekyll&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot;&gt;创建博客&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-3&quot;&gt;后续&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-4&quot;&gt;可能出现的问题&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#hitimeshitimes-loaderror&quot;&gt;&lt;code&gt;hitimes/hitimes (LoadError)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;Назначение&lt;/h2&gt;

&lt;p&gt;Пультовая централизованная и автономная охрана небольших частных объектов и жилых помещений.  &lt;br /&gt;
&lt;img src=&quot;/css/pics/ruby-v.png&quot; alt=&quot;f&quot; /&gt;    &lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;搭建过程&lt;/h2&gt;

&lt;p&gt;在jekyll的官网上 &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;http://jekyllrb.com/&lt;/a&gt; 其实已经说得比较明白了，我在这里还是简单的说一下吧。我用的是Windows系统。  &lt;br /&gt;
主要环节有：安装Ruby，安装RubyGems，安装jekyll，安装代码高亮插件，安装node.js&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;ruby&quot;&gt;安装Ruby&lt;/h3&gt;

&lt;p&gt;ruby官网下载安装：&lt;a href=&quot;https://www.ruby-lang.org/en/downloads/&quot;&gt;https://www.ruby-lang.org/en/downloads/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;安装完成后配置环境变量&lt;/p&gt;

&lt;p&gt;在命令提示符中，得到ruby版本号，如下图，即安装成功
&lt;img src=&quot;/css/pics/ruby-v.png&quot; alt=&quot;ruby-v&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;rubygems&quot;&gt;安装RubyGems&lt;/h3&gt;

&lt;p&gt;官网下载 &lt;a href=&quot;http://rubygems.org/pages/download&quot;&gt;http://rubygems.org/pages/download&lt;/a&gt; rubygems-2.4.5.zip   &lt;/p&gt;

&lt;p&gt;cd到RubyGems目录   &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/css/pics/ruby-gems.png&quot; alt=&quot;ruby-gems&quot; /&gt;    &lt;/p&gt;

&lt;p&gt;执行安装   &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/css/pics/ruby-gems-setup.png&quot; alt=&quot;ruby-gems-setup&quot; /&gt;   &lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;rubygemsjekyll&quot;&gt;用RubyGems安装Jekyll&lt;/h3&gt;

&lt;p&gt;执行下面的语句安装   &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/css/pics/jekyll-setup.png&quot; alt=&quot;jekyll-setup&quot; /&gt;   &lt;/p&gt;

&lt;p&gt;安装结束画面   &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/css/pics/jekyll-setup-finish.png&quot; alt=&quot;jekyll-setup-finish&quot; /&gt;   &lt;/p&gt;

&lt;p&gt;至此jekyll就已经安装完毕了，后续就是个性化的自己设定了。   &lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-2&quot;&gt;创建博客&lt;/h3&gt;

&lt;p&gt;在d盘新建一个工作区jekyllWorkspace&lt;/p&gt;

&lt;p&gt;cd到jekyllWorkspace   &lt;/p&gt;

&lt;p&gt;执行jekyll new name创建新的工作区   &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/css/pics/jekyllWorkSpace.png&quot; alt=&quot;jekyllWorkSpace&quot; /&gt;   &lt;/p&gt;

&lt;p&gt;文件结构如下：   &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/css/pics/jekyllFiles.png&quot; alt=&quot;jekyllFiles&quot; /&gt;&lt;/p&gt;

&lt;p&gt;cd到博客文件夹，开启服务器   &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/css/pics/serve.png&quot; alt=&quot;serve&quot; /&gt;   &lt;/p&gt;

&lt;p&gt;watch为了检测文件夹内的变化，即修改后不需要重新启动jekyll&lt;/p&gt;

&lt;p&gt;我的环境下启动报错(你的可能没有)，再安装yajl-ruby和rouge  &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/css/pics/yajl.png&quot; alt=&quot;yajl&quot; /&gt;&lt;/p&gt;

&lt;p&gt;再次启动服务器成功&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/css/pics/serve-sucess.png&quot; alt=&quot;serve-sucess&quot; /&gt;&lt;/p&gt;

&lt;p&gt;访问 http://localhost:4000/   &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/css/pics/browser.png&quot; alt=&quot;browser&quot; /&gt;   &lt;/p&gt;

&lt;p&gt;详细文章页面   &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/css/pics/browser2.png&quot; alt=&quot;browser2&quot; /&gt;  &lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-3&quot;&gt;后续&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;整个安装过程参考了jekyll官网，注意jekyll还有一个简体中文官网，不过比较坑（我就被坑了），有些内容没有翻译过来，有可能会走弯路，建议如果想看中文的相关资料，也要中英对照着阅读。&lt;a href=&quot;http://jekyllcn.com&quot;&gt;jekyll中文网 http://jekyllcn.com&lt;/a&gt;, &lt;a href=&quot;http://jekyllrb.com&quot;&gt;jekyll英文网 http://jekyllrb.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;jekyll中的css是用sass写的，当然直接在&lt;code&gt;_sass/_layout.scss&lt;/code&gt;中添加css也是可以的。&lt;/li&gt;
  &lt;li&gt;本文是用Markdown格式来写的，相关语法可参考： &lt;a href=&quot;http://wowubuntu.com/markdown/&quot;&gt;Markdown 语法说明 (简体中文版) http://wowubuntu.com/markdown/&lt;/a&gt;  &lt;/li&gt;
  &lt;li&gt;按照本文的说明搭建完博客后，用&lt;code&gt;github Pages&lt;/code&gt;托管就可以看到了。注意，在github上面好像不支持rouge，所以要push到github上时，我将配置文件_config.yml中的代码高亮改变为&lt;code&gt;highlighter: pygments&lt;/code&gt;就可以了&lt;/li&gt;
  &lt;li&gt;博客默认是没有评论系统的，本文的评论系统使用了多说，详细安装办法可访问&lt;a href=&quot;http://duoshuo.com/&quot;&gt;多说官网 http://duoshuo.com/&lt;/a&gt;，当然也可以使用&lt;a href=&quot;http://changyan.sohu.com/&quot;&gt;搜狐畅言 http://changyan.sohu.com/&lt;/a&gt;作为评论系统。	&lt;/li&gt;
  &lt;li&gt;也可以绑定自己的域名，如果没有域名，可以在&lt;a href=&quot;http://www.godaddy.com/&quot;&gt;godaddy http://www.godaddy.com/&lt;/a&gt;上将域名放入购物车等待降价，买之。&lt;/li&gt;
  &lt;li&gt;祝各位新年快乐！&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-4&quot;&gt;可能出现的问题&lt;/h2&gt;

&lt;h3 id=&quot;hitimeshitimes-loaderror&quot;&gt;&lt;code&gt;hitimes/hitimes (LoadError)&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;错误代码：&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;markdown&quot;&gt;C:/Ruby22/lib/ruby/2.2.0/rubygems/core_ext/kernel_require.rb:54:in `require&#39;: cannot load such file -- hitimes/hitimes (LoadError)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;解决方法：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在stackoverflow上又一个很好的解决方法。&lt;a href=&quot;http://stackoverflow.com/questions/28985481/hitimes-require-error-when-running-jekyll-serve-on-windows-8-1&quot;&gt;hitimes require error when running jekyll serve on windows 8.1&lt;/a&gt; 虽然上面的题主问的是 win 8.1 系统下的情况，但是同样适用于 win7。下面我简单翻译一下错误原因和解决方法。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;可能是 Ruby 2.2 和 hitimes-1.2.2-x86-mingw32 中有一些 ABI 变化，少了一些相关的类库。&lt;/p&gt;

  &lt;p&gt;所以卸载 hitimes 并通过 &lt;code&gt;--platform ruby&lt;/code&gt; 重装即可。代码如下：&lt;/p&gt;

  &lt;pre&gt;&lt;code class=&quot;markdown&quot;&gt;gem uni hitimes
**Remove ALL versions**
gem ins hitimes -v 1.2.1 --platform ruby
&lt;/code&gt;&lt;/pre&gt;
  &lt;p&gt;然后将自动重新编译 hitimes 并适用于 Ruby 2.2&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;下面是我自己的卸载和安装过程：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;markdown&quot;&gt;E:\GitWorkSpace\gaohaoyang.github.io&amp;gt;gem uni hitimes

You have requested to uninstall the gem:
        hitimes-1.2.2-x86-mingw32

timers-4.0.1 depends on hitimes (&amp;gt;= 0)
If you remove this gem, these dependencies will not be met.
Continue with Uninstall? [yN]  y
Successfully uninstalled hitimes-1.2.2-x86-mingw32

E:\GitWorkSpace\gaohaoyang.github.io&amp;gt;gem ins hitimes -v 1.2.1 --platform ruby
Fetching: hitimes-1.2.1.gem (100%)
Temporarily enhancing PATH to include DevKit...
Building native extensions.  This could take a while...
Successfully installed hitimes-1.2.1
Parsing documentation for hitimes-1.2.1
Installing ri documentation for hitimes-1.2.1
Done installing documentation for hitimes after 1 seconds
1 gem installed&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;关于，&lt;a href=&quot;https://rubygems.org/gems/hitimes/versions/1.2.2&quot;&gt;hitimes&lt;/a&gt; 是一个快速的高效的定时器解决方案库，详情可以去官网查看。&lt;/p&gt;

</description>
        <pubDate>Wed, 16 Nov 2016 03:14:54 +0500</pubDate>
        <link>/%D0%9E%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D0%BE%D0%B2%D1%8B%D0%B5/2016/11/16/%D0%93%D0%B5%D1%80%D1%81%D0%B0.html</link>
        <guid isPermaLink="true">/%D0%9E%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D0%BE%D0%B2%D1%8B%D0%B5/2016/11/16/%D0%93%D0%B5%D1%80%D1%81%D0%B0.html</guid>
        
        
        <category>Объектовые</category>
        
      </item>
    
      <item>
        <title>Приемник Событий</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot;&gt;题目&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot;&gt;解答&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot;&gt;思路&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-3&quot;&gt;具体实现代码&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-4&quot;&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;题目&lt;/h2&gt;

&lt;p&gt;题目来自 &lt;a href=&quot;http://imooc.com/code/5760&quot;&gt;慕课网 JavaScript 深入浅出 1-6 编程练习&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;请在 index.html 文件中，编写 arraysSimilar 函数，实现判断传入的两个数组是否相似。具体需求：    &lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;数组中的成员类型相同，顺序可以不同。例如 [1, true] 与 [false, 2] 是相似的。&lt;/li&gt;
  &lt;li&gt;数组的长度一致。&lt;/li&gt;
  &lt;li&gt;类型的判断范围，需要区分: String, Boolean, Number, undefined, null, 函数, 日期, window.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;当以上全部满足，则返回&lt;strong&gt;“判定结果:通过”&lt;/strong&gt;，否则返回&lt;strong&gt;“判定结果:不通过”&lt;/strong&gt;。    &lt;/p&gt;

&lt;p&gt;题目给出了 index.html 如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE HTML&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=gb18030&quot;&amp;gt;
    &amp;lt;title&amp;gt;Untitled Document&amp;lt;/title&amp;gt;
    
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;script type=&quot;text/javascript&quot;&amp;gt;   
        /*
         * param1 Array 
         * param2 Array
         * return true or false
         */
        function arraysSimilar(arr1, arr2){
        
        }
    &amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;testData.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中 testData.js 是测试用例，代码如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var result = function() {
    //以下为多组测试数据
    var cases = [{
        arr1: [1, true, null],
        arr2: [null, false, 100],
        expect: true
    }, {
        arr1: [
            function() {},
            100
        ],
        arr2: [100, {}],
        expect: false
    }, {
        arr1: [null, 999],
        arr2: [{},
            444
        ],
        expect: false
    }, {
        arr1: [window, 1, true, new Date(), &quot;hahaha&quot;, (function() {}), undefined],
        arr2: [undefined, (function() {}), &quot;okokok&quot;, new Date(), false, 2, window],
        expect: true
    }, {
        arr1: [new Date()],
        arr2: [{}],
        expect: false
    }, {
        arr1: [window],
        arr2: [{}],
        expect: false
    }, {
        arr1: [undefined, 1],
        arr2: [null, 2],
        expect: false
    }, {
        arr1: [new Object, new Object, new Object],
        arr2: [{}, {},
            null
        ],
        expect: false
    }, {
        arr1: null,
        arr2: null,
        expect: false
    }, {
        arr1: [],
        arr2: undefined,
        expect: false
    }, {
        arr1: &quot;abc&quot;,
        arr2: &quot;cba&quot;,
        expect: false
    }];

    //使用for循环, 通过arraysSimilar函数验证以上数据是否相似，如相似显示“通过”,否则&quot;不通过&quot;,所以大家要完成arraysSimilar函数,具体要求，详见任务要求。    
    for (var i = 0; i &amp;lt; cases.length; i++) {
        if (arraysSimilar(cases[i].arr1, cases[i].arr2) !== cases[i].expect) {
            document.write(&quot;不通过！case&quot; + (i + 1) + &quot;不正确！arr1=&quot; + JSON.stringify(cases[i].arr1) + &quot;, arr2=&quot; + JSON.stringify(cases[i].arr2) + &quot; 的判断结果不是&quot; + cases[i].expect);
            return false;
        }
    }
    return true;

}();
document.write(&quot;判定结果:&quot; + (result ? &quot;通过&quot; : &quot;不通过&quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;解答&lt;/h2&gt;

&lt;p&gt;各位读者在看解答前也可以自己考虑一下，看看咱们的想法是否一致，期待您在本文的留言。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-2&quot;&gt;思路&lt;/h3&gt;

&lt;p&gt;通过观察测试用例，可以发现，最后三个用例有不是数组的。所以我们可以先判断传入的参数是否是数组。 &lt;br /&gt;
又因为题目中要求数组长度必须一致，这也是第二个限制条件。 &lt;br /&gt;
最后再区分具体的类型。   &lt;/p&gt;

&lt;p&gt;理清思路我们可以分为以下步骤：   &lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;判断传入的参数是否为数组 (使用 &lt;code&gt;instanceof&lt;/code&gt; 方法)&lt;/li&gt;
  &lt;li&gt;检查两个数组长度是否一致&lt;/li&gt;
  &lt;li&gt;分别判断数组内元素的基本数据类型 (使用 &lt;code&gt;typeof&lt;/code&gt; 方法)&lt;/li&gt;
  &lt;li&gt;因为 &lt;code&gt;typeof&lt;/code&gt; 只能检查基本数据类型，对于 &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;Date&lt;/code&gt;, &lt;code&gt;window&lt;/code&gt; 返回的都是 &lt;code&gt;object&lt;/code&gt;，所以使用 &lt;code&gt;Object.prototype.toString.apply()&lt;/code&gt; 来检查这些对象类型，其返回值为：&lt;code&gt;&#39;[object Null]&#39;&lt;/code&gt;, &lt;code&gt;&#39;[object Date]&#39;&lt;/code&gt;, &lt;code&gt;&#39;[object global]&#39;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;分别比较每个数组内元素的各种类型的个数，如果都相等，那么这两个数组是相似的。&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-3&quot;&gt;具体实现代码&lt;/h3&gt;

&lt;p&gt;JavaScript代码如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/**
 * =====================================================
 * 请在index.html文件中，编写arraysSimilar函数，实现判断传入的两个数组是否相似。具体需求：
 * 1. 数组中的成员类型相同，顺序可以不同。例如[1, true] 与 [false, 2]是相似的。
 * 2. 数组的长度一致。
 * 3. 类型的判断范围，需要区分:String, Boolean, Number, undefined, null, 函数，日期, window.
 *
 * 当以上全部满足，则返回&quot;判定结果:通过&quot;，否则返回&quot;判定结果:不通过&quot;。
 * ===================================================== 
 */

/*
* param1 Array
* param2 Array
* return true or false
*/
function arraysSimilar(arr1, arr2){
	if (arr1 instanceof Array &amp;amp;&amp;amp; arr2 instanceof Array ) {	//先判断传入的是否是数组
		if (arr1.length == arr2.length) {					//判断数组长度
			console.log(&quot;same-length&quot;);
			console.log(arr1);
			console.log(arr2);
			//开始判断数组内部是否相似
			return sameLengthArraysSimilar(arr1, arr2);
		} else{
			//两个数组长度不同返回false
			return false;
		}
	} else {
		//传入的参数不是数组返回false
		return false;
	}
}

/**
 * 判断两个等长的数组内部是否相似
 * 遍历数组
 * arr1中元素各种类型出现的个数是否和arr2中元素各种类型出现的个数相同
 * @param  {Array} arr1 数组1
 * @param  {Array} arr2 数组2
 * @return {true,false}
 */
function sameLengthArraysSimilar(arr1,arr2) {
	var numInArr1 = 0;
	var numInArr2 = 0;
	var booleanInArr1 = 0;
	var booleanInArr2 = 0;
	var funInArr1 = 0;
	var funInArr2 = 0;
	var undefinedInArr1 = 0;
	var undefinedInArr2 = 0;
	var stringInArr1 = 0;
	var stringInArr2 = 0;
	var nullInArr1 = 0;
	var nullInArr2 = 0;
	var dateInArr1 = 0;
	var dateInArr2 = 0;
	var windowInArr1 = 0;
	var windowInArr2 = 0;

	for (var i = 0; i &amp;lt; arr1.length; i++) {
		if(typeof arr1[i] === &#39;number&#39; ){
			numInArr1 ++;
		} else if(typeof arr1[i] === &#39;boolean&#39;){
			booleanInArr1 ++;
		} else if(typeof arr1[i] === &#39;function&#39;){
			funInArr1 ++;
		} else if(typeof arr1[i] === &#39;undefined&#39;){
			undefinedInArr1 ++;
		} else if(typeof arr1[i] === &#39;string&#39;){
			stringInArr1 ++;
		} else if(typeof arr1[i] ===&#39;object&#39;){
			if(Object.prototype.toString.apply(arr1[i]) === &#39;[object Null]&#39;){
				nullInArr1 ++;
			} else if(Object.prototype.toString.apply(arr1[i]) === &#39;[object Date]&#39;){
				dateInArr1 ++;
			} else if(Object.prototype.toString.apply(arr1[i]) === &#39;[object global]&#39;){
				windowInArr1 ++;
			}
		}

		if(typeof arr2[i] === &#39;number&#39;){
			numInArr2 ++;
		} else if(typeof arr2[i] === &#39;boolean&#39;){
			booleanInArr2 ++;
		} else if(typeof arr2[i] === &#39;function&#39;){
			funInArr2 ++;
		} else if(typeof arr2[i] === &#39;undefined&#39;){
			undefinedInArr2 ++;
		} else if(typeof arr2[i] === &#39;string&#39;){
			stringInArr2 ++;
		} else if(typeof arr2[i] ===&#39;object&#39;){
			if(Object.prototype.toString.apply(arr2[i]) === &#39;[object Null]&#39;){
				nullInArr2 ++;
			} else if(Object.prototype.toString.apply(arr2[i]) === &#39;[object Date]&#39;){
				dateInArr2 ++;
			} else if(Object.prototype.toString.apply(arr2[i]) === &#39;[object global]&#39;){
				windowInArr2 ++;
			}
		}
	}

	console.log(&quot;num---&quot;+numInArr1);
	console.log(&quot;num---&quot;+numInArr2);
	console.log(&quot;boo---&quot;+booleanInArr1);
	console.log(&quot;boo---&quot;+booleanInArr2);
	console.log(&quot;null---&quot;+nullInArr1);
	console.log(&quot;null---&quot;+nullInArr2);
	console.log(&quot;window---&quot;+windowInArr1);
	console.log(&quot;window---&quot;+windowInArr2);
	console.log(&quot;date---&quot;+dateInArr1);
	console.log(&quot;date---&quot;+dateInArr2);
	console.log(&quot;string---&quot;+stringInArr1);
	console.log(&quot;string---&quot;+stringInArr2);
	console.log(&quot;fun---&quot;+funInArr1);
	console.log(&quot;fun---&quot;+funInArr2);
	console.log(&quot;undefined---&quot;+undefinedInArr1);
	console.log(&quot;undefined---&quot;+undefinedInArr2);

	if(numInArr1 == numInArr2 &amp;amp;&amp;amp; booleanInArr1==booleanInArr2 &amp;amp;&amp;amp; funInArr1==funInArr2 &amp;amp;&amp;amp; undefinedInArr1==undefinedInArr2 &amp;amp;&amp;amp; stringInArr1==stringInArr2 &amp;amp;&amp;amp; nullInArr1==nullInArr2 &amp;amp;&amp;amp; dateInArr1==dateInArr2 &amp;amp;&amp;amp; windowInArr1==windowInArr2){
		console.log(&#39;================================true&#39;);
		return true;
	}else{
		console.log(&#39;================================false&#39;);
		return false;
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-4&quot;&gt;总结&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;上述代码完美的跑完所有的测试用例，读者 &lt;a href=&quot;http://gaohaoyang.github.io/javascript-test/arraysSimilar/&quot;&gt;点击这里查看结果&lt;/a&gt;，并且可以按 &lt;code&gt;f12&lt;/code&gt; 看 Console 信息， 里面有代码的执行过程。  &lt;/li&gt;
  &lt;li&gt;当然你也可以复制本文的 JavaScript 代码，在 &lt;a href=&quot;http://imooc.com/code/5760&quot;&gt;慕课网的习题&lt;/a&gt; 下跑一下，也可以看到 &lt;code&gt;判定结果:通过&lt;/code&gt; 的结果&lt;/li&gt;
  &lt;li&gt;完整源代码在我的 GitHub &lt;a href=&quot;https://github.com/Gaohaoyang/javascript-test/tree/master/arraysSimilar&quot;&gt;javascript-test/arraysSimilar/&lt;/a&gt; 仓库中   &lt;/li&gt;
  &lt;li&gt;其实我的代码逻辑并不复杂，有点&lt;strong&gt;空间换时间&lt;/strong&gt;的感觉，执行效率应该是较高的。没有用 JavaScript 封装的任何函数，完全是自己写的。其实代码除去 &lt;code&gt;console.log()&lt;/code&gt; 也并没有多少行。&lt;/li&gt;
  &lt;li&gt;各位读者有什么好的想法欢迎留言交流！&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 06 Apr 2015 20:14:54 +0500</pubDate>
        <link>/%D0%9F%D1%83%D0%BB%D1%8C%D1%82%D0%BE%D0%B2%D1%8B%D0%B5/%D0%9F%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D1%8B/2015/04/06/%D0%9F%D1%80%D0%B8%D0%B5%D0%BC%D0%BD%D0%B8%D0%BA-%D1%81%D0%BE%D0%B1%D1%8B%D1%82%D0%B8%D0%B9.html</link>
        <guid isPermaLink="true">/%D0%9F%D1%83%D0%BB%D1%8C%D1%82%D0%BE%D0%B2%D1%8B%D0%B5/%D0%9F%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D1%8B/2015/04/06/%D0%9F%D1%80%D0%B8%D0%B5%D0%BC%D0%BD%D0%B8%D0%BA-%D1%81%D0%BE%D0%B1%D1%8B%D1%82%D0%B8%D0%B9.html</guid>
        
        
        <category>Пультовые</category>
        
        <category>Программы</category>
        
      </item>
    
      <item>
        <title>Конфигуратор</title>
        <description>
</description>
        <pubDate>Thu, 26 Mar 2015 20:14:54 +0500</pubDate>
        <link>/%D0%9F%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D1%8B/%D0%9E%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D0%BE%D0%B2%D1%8B%D0%B5/2015/03/26/%D0%9A%D0%BE%D0%BD%D1%84%D0%B8%D0%B3%D1%83%D1%80%D0%B0%D1%82%D0%BE%D1%80.html</link>
        <guid isPermaLink="true">/%D0%9F%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D1%8B/%D0%9E%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D0%BE%D0%B2%D1%8B%D0%B5/2015/03/26/%D0%9A%D0%BE%D0%BD%D1%84%D0%B8%D0%B3%D1%83%D1%80%D0%B0%D1%82%D0%BE%D1%80.html</guid>
        
        
        <category>Программы</category>
        
        <category>Объектовые</category>
        
      </item>
    
      <item>
        <title>USB-modem</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot;&gt;Назначение&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;Назначение&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Организация дополнительного канала передачи данных от объектов к пульту&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Организация локального автономного пульта охраны без подключения к сети интернет&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sat, 21 Mar 2015 20:14:54 +0500</pubDate>
        <link>/%D0%9F%D1%83%D0%BB%D1%8C%D1%82%D0%BE%D0%B2%D1%8B%D0%B5/2015/03/21/USB-modem.html</link>
        <guid isPermaLink="true">/%D0%9F%D1%83%D0%BB%D1%8C%D1%82%D0%BE%D0%B2%D1%8B%D0%B5/2015/03/21/USB-modem.html</guid>
        
        
        <category>Пультовые</category>
        
      </item>
    
      <item>
        <title>Герса-ИК</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;Назначение&lt;/h2&gt;

&lt;p&gt;Расширение охраняемых зон прибора “Герса”&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;Подключение&lt;/h2&gt;

&lt;p&gt;Подключается непосредственно к клемам внешней зоны прибора “Герса”. Допольнительное внешнее питание не требуется.&lt;/p&gt;
</description>
        <pubDate>Tue, 10 Feb 2015 20:14:54 +0500</pubDate>
        <link>/%D0%9E%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D0%BE%D0%B2%D1%8B%D0%B5/2015/02/10/%D0%93%D0%B5%D1%80%D1%81%D0%B0-%D0%98%D0%9A.html</link>
        <guid isPermaLink="true">/%D0%9E%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D0%BE%D0%B2%D1%8B%D0%B5/2015/02/10/%D0%93%D0%B5%D1%80%D1%81%D0%B0-%D0%98%D0%9A.html</guid>
        
        
        <category>Объектовые</category>
        
      </item>
    
  </channel>
</rss>
